{"ts":1378814351462,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class BaseImport\n\n  # Barry 7/28 Changes to support importation of tags\n  def BaseImport.gather_tags(stuff, tagnames)\n  \n  \tif (!tagnames)\n  \t\treturn nil\n  \tend\n  \n  \ttags = Array.new\n\t# find or create the tags\n  \ttagnames.split('|').each do |tagname| \n    \t\ttag = find_tag(stuff,tagname)\n    \t\ttags.push(tag)\n  \tend\n  \t\n  \treturn tags\n  end\n  \n  # Used to find multiple folders with the passed name (ie. not just the first one)\n  def BaseImport.find_tag(stuff, tagname)  \n            if ( tagname != \"\" and tagname != nil )\n              query_result = stuff.slm.find(\n                :tag,\n                :workspace => stuff.workspace\n                ) {equal :name, tagname}\n                \n              if query_result.total_result_count == 0\n                puts \"creating #{tagname}\\n\"\n              \treturn stuff.slm.create(:tag,{:workspace=>stuff.workspace,:name=>tagname})\n              end\n              return query_result.first\n            end\n  end\n  \n  def BaseImport.update_tags(stuff, artifact, tags)\n  \n  \tif tags\n  \t    \ttagfields = {}\n  \t    \ttagfields[:tags] = gather_tags(stuff, tags)\n  \t\tartifact.update(tagfields)\n\tend\n        \t\n  end\n\n\n\n  def BaseImport.gather_artifact_fields(stuff, header, row)\n    artifact_fields = {\n#      :workspace => stuff.workspace,\n      :project => stuff.project,\n      :name => row[\"Name\"],\n      :owner => row[\"Owner\"],\n      :description => row[\"Description\"],\n      :notes => row[\"Notes\"],\n#      :tags => gather_tags(stuff, row[\"Tags\"])\n    }\n  end\n  \n  def BaseImport.gather_custom_fields(header,row)\n    custom_fields = {}\n    \n    find_custom_fields(header).each { |field| \n      custom_fields[field.to_sym] = row[\"Custom:\"+field]\n    }\n    \n    find_custom_links(header).each { |field| \n      row_value = row[\"CustomLink:\" + field]\n      if row_value != nil\n        colon = row_value.index(\":\")\n        id = row_value[0,colon]\n        display_string = row_value[colon+1,row_value.length]\n    \n        custom_fields[field.to_sym] = {:link_i_d => id, :display_string => display_string}\n      end\n    }\n    \n    custom_fields\n  end\n\n  def BaseImport.find_custom_fields(header)\n    custom = []\n\n    header.each { |h|\n    \t# puts \"* #{h}\\n\"\n      if h.include? \"Custom:\"\n        custom << h[7,h.length]\n      end\n    }\n    custom\n  end\n  \n  def BaseImport.find_custom_links(header)\n    custom = []\n    header.each { |h|\n      if h.include? \"CustomLink:\"\n        custom << h[11,h.length]\n      end\n    }\n    custom\n  end\n  \nend"]],"start1":0,"start2":0,"length1":0,"length2":2485}]],"length":2485}
