{"ts":1378814377405,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Written by Mark Ringer @ Rally\r\n# Not a Ruby developer\r\n# Not really a developer anymore\r\n# \r\n# Small Things\r\n# Would be nice to create Users & Permissions\r\n# \r\n# Next Steps\r\n# Caching to make things faster\r\n# Unit Testing\r\n# Export/Import Custom Fields & Values\r\n# Should page at 100 instead of the defaul, will be faster\r\n# \r\n# Minor Issues\r\n# Since we link things together by name, if there are two objects with the same name - oops\r\n# Only works for a single project right now\r\n# Check that you are in the proper Workspace type for creating things\r\n# \r\n\r\n# Turns off some certificate warnings (and probably other things)\r\n$VERBOSE = nil\r\n\r\n# needed?\r\nrequire 'rubygems'\r\nrequire 'rally_rest_api'\r\nrequire 'stuff'\r\nrequire 'property'\r\nrequire 'import_defects'\r\nrequire 'import_iterations'\r\nrequire 'import_releases'\r\nrequire 'import_stories'\r\nrequire 'import_test_folders'\r\nrequire 'import_test_cases'\r\nrequire 'export_test_cases'\r\nrequire 'export_cards'\r\nrequire 'export_defects'\r\nrequire 'export_releases'\r\nrequire 'export_iterations'\r\nrequire 'export_stories'\r\nrequire 'import_discussions'\r\nrequire 'import_capacity'\r\n\r\nprop_name = \"default.properties\"\r\nif ARGV[0] != nil\r\n  prop_name = ARGV[0]\r\nend\r\n\r\nproperties = Properties.load_properties(prop_name)\r\n\r\nbase_url = properties[\"setup.base_url\"]\r\nif ARGV[1] != nil\r\n  base_url = ARGV[1]\r\nend\r\n\r\nworkspace_name = nil\r\nif ARGV[2] != nil\r\n  workspace_name = ARGV[2]\r\nend\r\n\r\nif (  (properties[\"releases.export\"] != nil and properties[\"releases.export\"].downcase == \"true\") or\r\n      (properties[\"iterations.export\"] != nil and properties[\"iterations.export\"].downcase == \"true\") or\r\n      (properties[\"defects.export\"] != nil and properties[\"defects.export\"].downcase == \"true\") or\r\n      (properties[\"testcases.export\"] != nil and properties[\"testcases.export\"].downcase == \"true\") or \r\n      (properties[\"cards.export\"] != nil and properties[\"cards.export\"].downcase == \"true\") or\r\n      (properties[\"userstories.export\"] != nil and properties[\"userstories.export\"].downcase == \"true\")\r\n      )\r\n\r\n# TODO Have Bob check for valid login\r\n  slm = RallyRestAPI.new(:base_url => base_url,\r\n    :username => properties[\"export.user.name\"],\r\n    :password => properties[\"export.user.password\"])\r\n  \r\n  if workspace_name == nil\r\n    workspace_name = properties[\"export.workspace\"]\r\n  end\r\n  \r\n  workspace = find_workspace(slm, workspace_name)\r\n  project = find_project(workspace, properties[\"export.project\"])\r\n  \r\n  stuff = Stuff.new\r\n  stuff.slm = slm\r\n  stuff.workspace = workspace\r\n  stuff.project = project\r\n  stuff.subscription_id = slm.user.subscription.subscription_id\r\n\r\n  puts \"Caching Users\\n\"\r\n  cache_users(stuff)\r\n\r\n  #Export\r\n  \r\n  if properties[\"releases.export\"].downcase == \"true\"\r\n    ExportReleases.export(stuff,properties[\"releases.export.filename\"])\r\n  end\r\n  \r\n  if properties[\"iterations.export\"].downcase == \"true\"\r\n    ExportIterations.export(stuff,properties[\"iterations.export.filename\"])\r\n  end\r\n  \r\n  if properties[\"defects.export\"].downcase == \"true\"\r\n    ExportDefects.export(stuff,properties[\"defects.export.filename\"])\r\n  end\r\n  \r\n  if properties[\"testcases.export\"].downcase == \"true\"\r\n    ExportTestCases.export(stuff,properties[\"testcases.export.filename\"])\r\n  end\r\n  \r\n  if properties[\"cards.export\"].downcase == \"true\"\r\n    ExportCards.export(stuff,properties[\"cards.export.filename\"])\r\n  end\r\n  \r\n  if properties[\"userstories.export\"].downcase == \"true\"\r\n    tasks = true\r\n    if properties[\"userstories.export.tasks\"].downcase == \"false\"\r\n      tasks = false\r\n    end\r\n    ExportStories.export(stuff, properties[\"userstories.export.filename\"], tasks)\r\n  end\r\n  \r\nend # export section\r\n\r\n# Setup for Import (this is ugly)\r\nif (  (properties[\"releases.import\"] != nil and properties[\"releases.import\"].downcase == \"true\") or\r\n      (properties[\"iterations.import\"] != nil and properties[\"iterations.import\"].downcase == \"true\") or\r\n      (properties[\"stories.import\"] != nil and properties[\"stories.import\"].downcase == \"true\") or\r\n      (properties[\"defects.import\"] != nil and properties[\"defects.import\"].downcase == \"true\") or\r\n      (properties[\"testfolders.import\"] != nil and properties[\"testfolders.import\"].downcase == \"true\") or \r\n      (properties[\"testcases.import\"] != nil and properties[\"testcases.import\"].downcase == \"true\") or \r\n      (properties[\"discussions.import\"] != nil and properties[\"discussions.import\"].downcase == \"true\") or\r\n      (properties[\"capacity.import\"] != nil and properties[\"capacity.import\"].downcase == \"true\")\r\n   )\r\n            \r\n# TODO Have Bob check for valid login\r\n  slm1 = RallyRestAPI.new(:base_url => base_url, \r\n    :username => properties[\"import.user.name\"],\r\n    :password => properties[\"import.user.password\"])\r\n    \r\n  puts slm1.user.login_name\r\n  puts workspace_name\r\n  \r\n  if workspace_name == nil\r\n    workspace_name = properties[\"import.workspace\"]\r\n  end\r\n  \r\n  workspace = find_workspace(slm1, workspace_name)\r\n  project = find_project(workspace, properties[\"import.project\"])\r\n \r\n  stuff1 = Stuff.new\r\n  stuff1.slm = slm1\r\n  stuff1.workspace = workspace\r\n  stuff1.project = project\r\n  stuff1.subscription_id = slm1.user.subscription.subscription_id\r\n\r\n  # Import\r\n  \r\n  if properties[\"releases.import\"].downcase == \"true\"\r\n    puts \"Creating Releases\\n\"\r\n    create_releases(stuff1,properties[\"releases.import.filename\"])\r\n  end\r\n  \r\n  if properties[\"iterations.import\"].downcase == \"true\"\r\n    puts \"Creating Iterations\\n\"\r\n    create_iterations(stuff1,properties[\"iterations.import.filename\"])\r\n  end\r\n  \r\n  if properties[\"stories.import\"].downcase == \"true\"\r\n    ImportStories.create_stories(stuff1, properties[\"stories.import.filename\"])\r\n  end\r\n  \r\n  if properties[\"defects.import\"].downcase == \"true\"\r\n    ImportDefects.create_defects(stuff1, properties[\"defects.import.filename\"])\r\n  end\r\n\r\n  if properties[\"testfolders.import\"].downcase == \"true\"\r\n    ImportTestFolders.create_test_folders(stuff1, properties[\"testfolders.import.filename\"])\r\n  end\r\n    \r\n  if properties[\"testcases.import\"].downcase == \"true\"\r\n    ImportTestCases.create_test_cases(stuff1, properties[\"testcases.import.filename\"])\r\n  end\r\n\r\n  if properties[\"discussions.import\"].downcase == \"true\"\r\n    id = ImportDiscussions.new\r\n    id.create_discussions(stuff1, properties[\"discussions.import.filename\"])\r\n  end\r\n  \r\n  if properties[\"capacity.import\"].downcase == \"true\"\r\n    ImportCapacity.create_capacity(stuff1, properties[\"capacity.import.filename\"])\r\n  end\r\n\r\n# Complete hack to get the project scoping back to their defaults\r\n  query_result = stuff1.slm.find_all(:iteration, :project => stuff1.project, :project_scope_up => false, :project_scope_down => true)\r\n\r\nend # import section\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6721}]],"length":6721}
