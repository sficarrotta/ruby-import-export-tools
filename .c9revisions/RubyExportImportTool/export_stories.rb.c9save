{"ts":1378814426326,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'rally_rest_api'\r\nrequire 'stuff'\r\n\r\nclass ExportStories\r\n\r\n  STORY_FIELDS = %w{Type Name Parent Owner Status Blocked Release Iteration PlanEstimate TaskEstimate TaskToDo TaskActuals Rank \r\n                    Package Description Notes}\r\n\r\n  protected\r\n\r\n  def ExportStories.write_task(story_csv, task)\r\n    print \" Task: \", task.name, \"\\n\"\r\n  \r\n  #Filter out deleted users\r\n    owner = task.owner ? task.owner : \"\"\r\n    owner = check_user(owner)\r\n    \r\n    data = []\r\n    data << \"Task\"\r\n    data << task.name\r\n    data << nil #Parent\r\n    data << owner\r\n    data << task.state\r\n    data << task.blocked\r\n    data << nil #Release\r\n    data << nil #Iteration\r\n    data << nil #PlanEstimate\r\n    data << task.estimate ? task.estimate : \"\"\r\n    data << task.to_do ? task.to_do : \"\"\r\n    data << task.actuals ? task.actuals : \"\"\r\n    data << nil #Rank\r\n    data << nil #Package\r\n    data << task.description ? task.description : \"\"\r\n    data << task.notes ? task.notes : \"\"\r\n  \r\n    story_csv << FasterCSV::Row.new(STORY_FIELDS, data)  \r\n  end\r\n  \r\n  \r\n                      \r\n  def ExportStories.write_user_story(story_csv, story, export_tasks)\r\n    print \"Story: \", story.name, \"\\n\"\r\n  \r\n  #Filter out deleted users\r\n    owner = story.owner ? story.owner : \"\"\r\n    owner = check_user(owner)\r\n    \r\n    data = []\r\n    data << \"Story\"\r\n    data << story.name\r\n    data << (story.parent ? story.parent.name : \"\")\r\n    data << owner\r\n    data << story.schedule_state\r\n    data << story.blocked\r\n    data << (story.release ? story.release.name : \"\")\r\n    data << (story.iteration ? story.iteration.name : \"\")\r\n    data << story.plan_estimate\r\n    data << nil\r\n    data << nil\r\n    data << nil\r\n    data << story.rank\r\n    data << (story.package ? story.package : \"\")\r\n    data << (story.description ? story.description : \"\")\r\n    data << (story.notes ? story.notes : \"\")\r\n\t\r\n    story_csv << FasterCSV::Row.new(STORY_FIELDS, data)\r\n    \r\n  # TODO Once bob fixes flatten issue, use it for we might break on duplicate task names\r\n    if ( story.tasks != nil and export_tasks == true )\r\n      story.tasks.each {|task| write_task(story_csv, task)}\r\n  #    cards.tasks.values.flatten.each {|name, task| write_task(story_csv, task)}\r\n    end\r\n  \r\n  # Export the stories in a hierarchy\r\n  # This makes round trip export/import of parent/child hierarchy possible\r\n    if story.children != nil \r\n      story.children.each { |child| write_user_story(story_csv, child, export_tasks)}\r\n    end\r\n  \r\n  end\r\n\r\n  public\r\n\r\n  def ExportStories.export(stuff, filename, export_tasks)\r\n    # Only select stories without parents, the write_user_story method will export children recursively\r\n    query_result = stuff.slm.find(:hierarchical_requirement, :project => stuff.project) { equal :parent, nil}\r\n    \r\n    print \"Exporting \", query_result.total_result_count, \" User Stories\\n\"\r\n  \r\n    story_csv = FasterCSV.open(filename, \"w\")\r\n    story_csv << STORY_FIELDS\r\n  \r\n    query_result.each {|story| write_user_story(story_csv, story, export_tasks)}\r\n  end\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":3045}]],"length":3045}
